#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 18, 2019 10:12:12 PM +03  platform: Windows NT

import sys
import FindFiles
from tkinter import filedialog, messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import AAAAAA_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    AAAAAA_support.set_Tk_var()
    top = Toplevel1 (root)
    AAAAAA_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    AAAAAA_support.set_Tk_var()
    top = Toplevel1 (w)
    AAAAAA_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    global endDirectory
    endDirectory = ""
    global startDirectory
    startDirectory = ""

    def Searching(self):
        if startDirectory != "":
            if endDirectory != "":
                if InputExtension.get() != "":
                    ListOfExtencions = InputExtension.get().split(';')
                    if CheckVar.get() ==1:
                        # перемещение/копирование с заглядыванием в подкаталоги
                        FindFiles.ReplaceByExtencion(startDirectory, endDirectory, ListOfExtencions,var.get())
                    else:
                        #перемещение/копирование бещ загялдывания в подкаталоги
                        FindFiles.ReplaceByExtencionWhichCat(startDirectory,endDirectory,ListOfExtencions,var.get())
                else:
                    messagebox.showerror("Ошибка", "Укажите требуемые расширения")
            else:
                messagebox.showerror("Ошибка", "Не указана конечная директория")
        else:
            messagebox.showerror("Ошибка", "Не указана начальная директория")

    def startDirectoryBox(self, title=None, dirName=None):
        #self.topLevel.update_idletasks()
        options = {}
        options['initialdir'] = dirName
        options['title'] = title
        options['mustexist'] = False
        global startDirectory
        startDirectory = filedialog.askdirectory(**options)
        self.Label3.configure(text = startDirectory)

    def R1(self):
        print(var.get())
    def endDirectoryBox(self, title=None, dirName=None):
        #self.topLevel.update_idletasks()
        options = {}
        options['initialdir'] = dirName
        options['title'] = title
        options['mustexist'] = False
        global endDirectory
        endDirectory = filedialog.askdirectory(**options)
        self.Label4.configure(text=endDirectory)

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 

        top.geometry("329x405+646+272")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.061, rely=0.889, height=24, width=73)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Выполнить''')

        self.Checkbutton1 = tk.Checkbutton(top)
        self.Checkbutton1.place(relx=0.03, rely=0.0, relheight=0.086
                , relwidth=0.611)
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''заглядывать в подкаталоги''')
        self.Checkbutton1.configure(variable=AAAAAA_support.che44)
        self.Checkbutton1.configure(width=201)

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.061, rely=0.815,height=20, relwidth=0.681)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.0, rely=0.642, height=31, width=234)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''укажите расширения для файлов''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.061, rely=0.741, height=21, width=71)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''разделяя ";"''')

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.061, rely=0.296, height=24, width=138)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Начальная директория''')

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.061, rely=0.469, height=24, width=131)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Конечная директория''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.061, rely=0.37, height=21, width=324)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.061, rely=0.568, height=21, width=324)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.03, rely=0.099, relheight=0.185, relwidth=0.805)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=265)

        self.Radiobutton3 = tk.Radiobutton(self.Frame1)
        self.Radiobutton3.place(relx=0.038, rely=0.133, relheight=0.333
                , relwidth=0.596)
        self.Radiobutton3.configure(activebackground="#ececec")
        self.Radiobutton3.configure(activeforeground="#000000")
        self.Radiobutton3.configure(background="#d9d9d9")
        self.Radiobutton3.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3.configure(foreground="#000000")
        self.Radiobutton3.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3.configure(highlightcolor="black")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(text='''Переместить файлы''')

        self.Radiobutton1 = tk.Radiobutton(self.Frame1)
        self.Radiobutton1.place(relx=0.075, rely=0.533, relheight=0.333
                , relwidth=0.506)
        self.Radiobutton1.configure(activebackground="#ececec")
        self.Radiobutton1.configure(activeforeground="#000000")
        self.Radiobutton1.configure(background="#d9d9d9")
        self.Radiobutton1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1.configure(foreground="#000000")
        self.Radiobutton1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1.configure(highlightcolor="black")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Копировать файлы''')
        global var
        var = tk.IntVar()
        var.set(0)
        self.Radiobutton3.configure(variable=var, value=0)
        self.Radiobutton1.configure(variable=var, value=1)
        self.Button2.configure(command = self.startDirectoryBox)
        self.Button3.configure(command=self.endDirectoryBox)
        self.Button1.configure(command=self.Searching)
        global InputExtension
        InputExtension = tk.StringVar()
        self.Entry1.configure(textvariable = InputExtension)
        global CheckVar
        CheckVar = tk.IntVar()
        CheckVar.set(1)
        self.Checkbutton1.configure(variable=CheckVar)
if __name__ == '__main__':
    vp_start_gui()





